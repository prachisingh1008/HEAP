class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int , int>m;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>p;
        vector<int>ps;
        for(int i=0;i<nums.size();i++)
        {
            m[nums[i]]++;
        }
        for(auto i=m.begin();i!=m.end();i++)
        {
p.push({i->second,i->first});
if(p.size()>k)
p.pop();
        }
        while(p.size()>0)
        {
            ps.push_back(p.top().second);
            p.pop();
        }
        return ps;
    }


};



Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]



//GFG , here the elements are presented in descending order of their max occurenceunordered_map<int , int>m;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>p;
        vector<int>ps;
        for(int i=0;i<nums.size();i++)
        {
            m[nums[i]]++;
        }
        for(auto i=m.begin();i!=m.end();i++)
        {
p.push({i->second,i->first});
if(p.size()>k)
p.pop();
        }
        while(p.size()>0)
        {
            ps.push_back(p.top().second);
            p.pop();
        }
        return ps;


std::map: Elements in a std::map are always sorted by their keys in ascending order. This means that when 
you iterate through a std::map, the elements are presented in a sorted manner based on the keys.
std::unordered_map: Elements in an std::unordered_map are not sorted by their keys. 
Instead, they are organized based on a hash function, which allows for constant-time average complexity for insertions, 
deletions, and lookups. However, this also means that the order in which elements are inserted is not necessarily preserved.
