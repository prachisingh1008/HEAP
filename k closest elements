//LEETCODE
class Solution {
public:

    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        vector<int>p;
        priority_queue<pair<int,int>>mh;
        for(int i=0;i<arr.size();i++)
        {
            mh.push({abs(arr[i]-x),arr[i]});// first value ke hisaab se apne aap sort ho rha hai
            if(mh.size()>k)
            mh.pop();
        }
        while(mh.size()>0)
        {
            p.push_back(mh.top().second);
            mh.pop();
        }
        sort(p.begin(),p.end());
        return p;

    }
};

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]


//GFG



#include <bits/stdc++.h>
using namespace std;

class Solution {
  public:
    vector<int> printKClosest(vector<int> arr, int n, int k, int x) {
        // code here
         priority_queue<pair<int, int> > maxH;
   
      
 
    for (int i = 0; i < n; i++) {
        // Skip if the element is equal to x
        if (arr[i] == x)
            continue;
 
        // Calculate the absolute difference and add the
        // pair to the max heap
        maxH.push({ abs(arr[i] - x), -arr[i] });
 
        // If the size of the max heap exceeds k, remove the
        // element with the maximum absolute difference
        if (maxH.size() > k)
            maxH.pop();
    }
 
    // Store the result in a vector
    vector<int> result;
 
    // Retrieve the top k elements from the max heap
    while (!maxH.empty()) {
        // Get the top element from the max heap
        auto p = maxH.top();
        maxH.pop();
 
        // Add the negative value to the result vector
        result.push_back(-p.second);
    }
 
    // Reverse the result vector to get the closest numbers
    // in ascending order
    reverse(result.begin(), result.end());
 
    return result;}
};



int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k, x;
        cin >> n;
        vector<int> arr(n);
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        cin >> k >> x;
        Solution ob;
        auto ans = ob.printKClosest(arr, n, k, x);
        for (auto e : ans) {
            cout << e << " ";
        }
        cout << "\n";
    }
    return 0;
}

Input:
N = 13
arr[] = {12, 16, 22, 30, 35, 39, 42, 
         45, 48, 50, 53, 55, 56}
K = 4, X = 35
Output: 39 30 42 45

