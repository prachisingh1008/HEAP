class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int,pair<int,int>>>p;//max heap to store pair of distance , point itself
         vector<pair<int,int>>v;
        for(int i=0;i<points.size();i++)
        {
            p.push({points[i][0]*points[i][0]+points[i][1]*points[i][1],{points[i][0],points[i][1]}});//distance nikala eucledian formula se , sir 2 hi cloumns ho sakte na for denotinga a point isliy no of column fix par row nahi pta
            if(p.size()>k) // size_t numCols = points[0].size();-> colum size aise find karte
            p.pop();
        }
        
  while (!p.empty()) {
            v.push_back(p.top().second);
            p.pop();
        }
        
        // Reverse the vector to get the k closest points in the correct order
        reverse(v.begin(), v.end());
        
        // Convert vector<pair<int, int>> to vector<vector<int>> and return
        vector<vector<int>> result;
        for (const auto& point : v) {
            result.push_back({point.first, point.second});
        }
        return result;
    }
};

Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

 

Example 1:


Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].
